
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENrightUMINUSCIN COUT DEQUAL DISTINT DIVIDE ELSE EQUAL FOR GREATER GREATEREQUAL ID IF INT LBLOCK LESS LESSEQUAL LPAREN MINUS NUMBER PLUS RBLOCK RPAREN SEMICOLON STR STRING TIMES WHILEprogram : declaration_listdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : statement\n                        | sentencia\n    statement : INT ID EQUAL expression SEMICOLONstatement : CIN ID SEMICOLONstatement : STR ID EQUAL STRING SEMICOLONstatement : COUT expression SEMICOLONstatement : COUT STRING SEMICOLONexpression : expression PLUS expression\n                      | expression MINUS expression\n                      | expression TIMES expression\n                      | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERsentencia_mientras : WHILE LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK\n    sentencia_para : FOR LPAREN ID EQUAL expression SEMICOLON expression RPAREN LBLOCK lista_sentencia RBLOCKsentencia_si : IF LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK\n                    | IF LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK ELSE LPAREN RPAREN LBLOCK lista_sentencia RBLOCKcondiciones : LESS\n                    | GREATER\n                    | DEQUAL\n                    | DISTINT\n                    | LESSEQUAL\n                    | GREATEREQUAL condicion : expression condiciones expressionsentencia : sentencia_mientras\n                    | statement\n                    | sentencia_para\n                    | sentencia_si\n    lista_sentencia : lista_sentencia sentencia\n                    | sentencia\n    expression : ID'
    
_lr_action_items = {'INT':([0,2,3,4,5,10,11,12,16,30,32,37,61,62,63,66,67,68,69,71,72,73,75,78,80,82,83,84,85,],[6,6,-3,-4,-5,-29,-31,-32,-2,-7,-9,-10,-6,-8,6,6,6,-34,-30,6,-18,-33,-20,6,6,-19,6,6,-21,]),'CIN':([0,2,3,4,5,10,11,12,16,30,32,37,61,62,63,66,67,68,69,71,72,73,75,78,80,82,83,84,85,],[7,7,-3,-4,-5,-29,-31,-32,-2,-7,-9,-10,-6,-8,7,7,7,-34,-30,7,-18,-33,-20,7,7,-19,7,7,-21,]),'STR':([0,2,3,4,5,10,11,12,16,30,32,37,61,62,63,66,67,68,69,71,72,73,75,78,80,82,83,84,85,],[8,8,-3,-4,-5,-29,-31,-32,-2,-7,-9,-10,-6,-8,8,8,8,-34,-30,8,-18,-33,-20,8,8,-19,8,8,-21,]),'COUT':([0,2,3,4,5,10,11,12,16,30,32,37,61,62,63,66,67,68,69,71,72,73,75,78,80,82,83,84,85,],[9,9,-3,-4,-5,-29,-31,-32,-2,-7,-9,-10,-6,-8,9,9,9,-34,-30,9,-18,-33,-20,9,9,-19,9,9,-21,]),'WHILE':([0,2,3,4,5,10,11,12,16,30,32,37,61,62,63,66,67,68,69,71,72,73,75,78,80,82,83,84,85,],[13,13,-3,-4,-5,-29,-31,-32,-2,-7,-9,-10,-6,-8,13,13,13,-34,-30,13,-18,-33,-20,13,13,-19,13,13,-21,]),'FOR':([0,2,3,4,5,10,11,12,16,30,32,37,61,62,63,66,67,68,69,71,72,73,75,78,80,82,83,84,85,],[14,14,-3,-4,-5,-29,-31,-32,-2,-7,-9,-10,-6,-8,14,14,14,-34,-30,14,-18,-33,-20,14,14,-19,14,14,-21,]),'IF':([0,2,3,4,5,10,11,12,16,30,32,37,61,62,63,66,67,68,69,71,72,73,75,78,80,82,83,84,85,],[15,15,-3,-4,-5,-29,-31,-32,-2,-7,-9,-10,-6,-8,15,15,15,-34,-30,15,-18,-33,-20,15,15,-19,15,15,-21,]),'$end':([1,2,3,4,5,10,11,12,16,30,32,37,61,62,72,75,82,85,],[0,-1,-3,-4,-5,-29,-31,-32,-2,-7,-9,-10,-6,-8,-18,-20,-19,-21,]),'ID':([6,7,8,9,22,23,26,27,28,29,33,34,35,36,52,53,54,55,56,57,58,59,70,],[17,18,19,25,25,25,25,42,25,25,25,25,25,25,25,-22,-23,-24,-25,-26,-27,25,25,]),'STRING':([9,31,],[21,45,]),'MINUS':([9,20,22,23,24,25,26,28,29,33,34,35,36,38,39,41,44,46,47,48,49,50,52,53,54,55,56,57,58,59,64,65,70,74,],[22,34,22,22,-17,-35,22,22,22,22,22,22,22,-15,34,34,34,-11,-12,-13,-14,-16,22,-22,-23,-24,-25,-26,-27,22,34,34,22,34,]),'LPAREN':([9,13,14,15,22,23,26,28,29,33,34,35,36,52,53,54,55,56,57,58,59,70,77,],[23,26,27,28,23,23,23,23,23,23,23,23,23,23,-22,-23,-24,-25,-26,-27,23,23,79,]),'NUMBER':([9,22,23,26,28,29,33,34,35,36,52,53,54,55,56,57,58,59,70,],[24,24,24,24,24,24,24,24,24,24,24,-22,-23,-24,-25,-26,-27,24,24,]),'RBLOCK':([10,11,12,30,32,37,61,62,67,68,69,71,72,73,75,80,82,84,85,],[-29,-31,-32,-7,-9,-10,-6,-8,72,-34,-30,75,-18,-33,-20,82,-19,85,-21,]),'EQUAL':([17,19,42,],[29,31,59,]),'SEMICOLON':([18,20,21,24,25,38,44,45,46,47,48,49,50,65,],[30,32,37,-17,-35,-15,61,62,-11,-12,-13,-14,-16,70,]),'PLUS':([20,24,25,38,39,41,44,46,47,48,49,50,64,65,74,],[33,-17,-35,-15,33,33,33,-11,-12,-13,-14,-16,33,33,33,]),'TIMES':([20,24,25,38,39,41,44,46,47,48,49,50,64,65,74,],[35,-17,-35,-15,35,35,35,35,35,-13,-14,-16,35,35,35,]),'DIVIDE':([20,24,25,38,39,41,44,46,47,48,49,50,64,65,74,],[36,-17,-35,-15,36,36,36,36,36,-13,-14,-16,36,36,36,]),'RPAREN':([24,25,38,39,40,43,46,47,48,49,50,64,74,79,],[-17,-35,-15,50,51,60,-11,-12,-13,-14,-16,-28,76,81,]),'LESS':([24,25,38,41,46,47,48,49,50,],[-17,-35,-15,53,-11,-12,-13,-14,-16,]),'GREATER':([24,25,38,41,46,47,48,49,50,],[-17,-35,-15,54,-11,-12,-13,-14,-16,]),'DEQUAL':([24,25,38,41,46,47,48,49,50,],[-17,-35,-15,55,-11,-12,-13,-14,-16,]),'DISTINT':([24,25,38,41,46,47,48,49,50,],[-17,-35,-15,56,-11,-12,-13,-14,-16,]),'LESSEQUAL':([24,25,38,41,46,47,48,49,50,],[-17,-35,-15,57,-11,-12,-13,-14,-16,]),'GREATEREQUAL':([24,25,38,41,46,47,48,49,50,],[-17,-35,-15,58,-11,-12,-13,-14,-16,]),'LBLOCK':([51,60,76,81,],[63,66,78,83,]),'ELSE':([75,],[77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,16,]),'statement':([0,2,63,66,67,71,78,80,83,84,],[4,4,69,69,69,69,69,69,69,69,]),'sentencia':([0,2,63,66,67,71,78,80,83,84,],[5,5,68,68,73,73,68,73,68,73,]),'sentencia_mientras':([0,2,63,66,67,71,78,80,83,84,],[10,10,10,10,10,10,10,10,10,10,]),'sentencia_para':([0,2,63,66,67,71,78,80,83,84,],[11,11,11,11,11,11,11,11,11,11,]),'sentencia_si':([0,2,63,66,67,71,78,80,83,84,],[12,12,12,12,12,12,12,12,12,12,]),'expression':([9,22,23,26,28,29,33,34,35,36,52,59,70,],[20,38,39,41,41,44,46,47,48,49,64,65,74,]),'condicion':([26,28,],[40,43,]),'condiciones':([41,],[52,]),'lista_sentencia':([63,66,78,83,],[67,71,80,84,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','i_parser.py',22),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','i_parser.py',26),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','i_parser.py',31),
  ('declaration -> statement','declaration',1,'p_declaration','i_parser.py',35),
  ('declaration -> sentencia','declaration',1,'p_declaration','i_parser.py',36),
  ('statement -> INT ID EQUAL expression SEMICOLON','statement',5,'p_statement_assign','i_parser.py',41),
  ('statement -> CIN ID SEMICOLON','statement',3,'p_statement_entrada','i_parser.py',45),
  ('statement -> STR ID EQUAL STRING SEMICOLON','statement',5,'p_statement_assign_str','i_parser.py',49),
  ('statement -> COUT expression SEMICOLON','statement',3,'p_statement_expr','i_parser.py',53),
  ('statement -> COUT STRING SEMICOLON','statement',3,'p_statement_expr_str','i_parser.py',57),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','i_parser.py',61),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','i_parser.py',62),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','i_parser.py',63),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','i_parser.py',64),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','i_parser.py',75),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','i_parser.py',79),
  ('expression -> NUMBER','expression',1,'p_expression_number','i_parser.py',83),
  ('sentencia_mientras -> WHILE LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK','sentencia_mientras',7,'p_sentencia_mientras','i_parser.py',87),
  ('sentencia_para -> FOR LPAREN ID EQUAL expression SEMICOLON expression RPAREN LBLOCK lista_sentencia RBLOCK','sentencia_para',11,'p_sentencia_para','i_parser.py',90),
  ('sentencia_si -> IF LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK','sentencia_si',7,'p_sentencia_si','i_parser.py',93),
  ('sentencia_si -> IF LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK ELSE LPAREN RPAREN LBLOCK lista_sentencia RBLOCK','sentencia_si',13,'p_sentencia_si','i_parser.py',94),
  ('condiciones -> LESS','condiciones',1,'p_condiciones','i_parser.py',97),
  ('condiciones -> GREATER','condiciones',1,'p_condiciones','i_parser.py',98),
  ('condiciones -> DEQUAL','condiciones',1,'p_condiciones','i_parser.py',99),
  ('condiciones -> DISTINT','condiciones',1,'p_condiciones','i_parser.py',100),
  ('condiciones -> LESSEQUAL','condiciones',1,'p_condiciones','i_parser.py',101),
  ('condiciones -> GREATEREQUAL','condiciones',1,'p_condiciones','i_parser.py',102),
  ('condicion -> expression condiciones expression','condicion',3,'p_condicion','i_parser.py',105),
  ('sentencia -> sentencia_mientras','sentencia',1,'p_sentencia','i_parser.py',108),
  ('sentencia -> statement','sentencia',1,'p_sentencia','i_parser.py',109),
  ('sentencia -> sentencia_para','sentencia',1,'p_sentencia','i_parser.py',110),
  ('sentencia -> sentencia_si','sentencia',1,'p_sentencia','i_parser.py',111),
  ('lista_sentencia -> lista_sentencia sentencia','lista_sentencia',2,'p_lista_sentencia','i_parser.py',115),
  ('lista_sentencia -> sentencia','lista_sentencia',1,'p_lista_sentencia','i_parser.py',116),
  ('expression -> ID','expression',1,'p_expression_id','i_parser.py',120),
]
